<%- include ('adminHeader')%>


<section class="content-main">
    <form action="/admin/createProduct" method="post" enctype="multipart/form-data">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                    <div>
                        <button type="submit" onclick="return productValidation()"
                            class="btn btn-md rounded font-sm hover-up">Publish</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="mb-4">
                            <label for="product_title" class="form-label">Product title</label>
                            <input name="name" type="text" placeholder="Type here" class="form-control"
                                id="productName">
                            <p id="nameErr"></p>
                        </div>
                        <div class="row gx-3">
                            <div class="col-md-4 mb-3">
                                <label for="product_size" class="form-label">Quantity</label>
                                <input type="text" name="stock" placeholder="Type here" class="form-control"
                                    id="product_size">
                                <p id="stockErr"></p>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="product_brand" class="form-label">Brand</label>
                            <input type="text" name="brand" placeholder="Type here" class="form-control"
                                id="product_brand">
                            <p id="brandErr"></p>
                        </div>
                    </div>
                </div>
                <div class="card mb-4">
                    <div class="card-body">
                        <div>
                            <label class="form-label">Description</label>
                            <textarea name="description" placeholder="Type here" class="form-control" rows="4"
                                id="product_description"></textarea>
                            <p id="descriptionErr"></p>
                        </div>
                    </div>
                </div>
                <div class="card mb-4">
                    

                    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
                    <link rel="stylesheet"
                        href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

                    <script>
                        let cropper;

                        function initCropper(id) {
                            const input = document.getElementById(id);
                            const canvas = document.getElementById(`show${id}`);
                            const file = input.files[0];

                            if (file) {
                                const reader = new FileReader();
                                reader.onload = function (e) {
                                    canvas.src = e.target.result;
                                    document.getElementById(`update${id}`).style.display = 'block';

                                    if (cropper) {
                                        cropper.destroy();
                                    }

                                    cropper = new Cropper(canvas, {
                                        viewMode: 2,
                                    });
                                };
                                reader.readAsDataURL(file);
                            } else {
                                canvas.src = '';
                                if (cropper) {
                                    cropper.destroy();
                                }
                            }
                        }

                        function uploadCroppedImage(id) {
                            const canvas = cropper.getCroppedCanvas();
                            if (canvas) {
                                canvas.toBlob((blob) => {
                                    const fileName = 'cropped_image.jpg';
                                    const file = new File([blob], fileName, {
                                        type: 'image/jpeg'
                                    });
                                    const input = document.getElementById(id);
                                    if (DataTransfer && FileList) {
                                        const dataTransfer = new DataTransfer();
                                        dataTransfer.items.add(file);
                                        input.files = dataTransfer.files;
                                    } else {
                                        console.error(
                                            'FileList and DataTransfer are not supported in this browser.');
                                    }
                                    const showImg = document.getElementById(`show${id}`);
                                    showImg.src = URL.createObjectURL(blob);

                                    cropper.destroy();
                                    document.getElementById(`update${id}`).style.display = 'none';
                                });
                            }
                        }
                    </script>

                    <div class="card mb-4">
                        <div class="card-body">
                            <div>
                                <label class="form-label">Cover Images</label>
                                <input type="file" class="form-control" accept="image/*" id="coverImages"
                                    name="coverimage" onchange="initCropper('coverImages')" multiple>
                                <p id="coverImageErr"></p>
                                <img src="" id="showcoverImages"
                                    style="width: auto; height: 300px; margin-top: 10px; display: block;" alt="">
                                <button class="btn btn-warning p-2 px-5" id="updatecoverImages"
                                    onclick="uploadCroppedImage('coverImages')" type="button"
                                    style="display: none;">Update</button>
                            </div>
                            <div>
                                <button type="button" id="cancelCoverImage"
                                    class="btn btn-sm rounded font-sm hover-up cancel-button">Cancel Cover
                                    Image</button>
                            </div>
                        </div>
                    </div>

                    <div class="card mb-4">
                        <div class="card-body">
                            <div>
                                <label class="form-label">Images</label>
                                <input name="images" class="form-control" type="file" onchange="initCropper('images')"
                                    id="images" multiple>

                                <img src="" id="showimages"
                                    style="width: auto; height: 300px; margin-top: 10px; display: block;" alt="">
                                <button class="btn btn-warning p-2 px-5" id="updateimages"
                                    onclick="uploadCroppedImage('images')" type="button"
                                    style="display: none;">Update</button>
                                <button type="button" id="cancelImages"
                                    class="btn btn-sm rounded font-sm hover-up cancel-button">Cancel Images</button>
                            </div>
                        </div>
                    </div>



                </div>
            </div>
            <div class="col-lg-3">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="mb-4">
                            <label class="form-label" for="product_price">Price</label>
                            <input type="text" name="price" placeholder="Type here" class="form-control"
                                id="product_price">
                            <p id="priceErr"></p>
                        </div>
                        <div class="mb-4">
                            <label class="form-label" for="product_status">Category</label>
                            <select class="form-select" name="category" id="product_status">
                                <p id="categoryErr"></p>
                                <% category.forEach(n=>{ %>
                                <option><%= n.name %></option>
                                <% }) %>
                            </select>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div>
                                    <label class="form-label">Offer</label>
                                    <input type="text" name="Offer" placeholder="offer %">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
    <script>
        function cancelCoverImage() {
            const coverImageInput = document.getElementById("coverImages");
            coverImageInput.value = null; 
            const coverImageErrorElement = document.getElementById("coverImageErr");
            coverImageErrorElement.innerText = ""; 
           
        }


        document.getElementById("cancelImages").onclick = function () {
            const imagesInput = document.querySelector("input[name='images']");
            imagesInput.value = null; // Reset the input value to clear the selected files
            const showImages = document.getElementById("showimages");
            showImages.src = '';
            if (cropper) {
                cropper.destroy();
            }

        };

        function productValidation() {
    // Reset error messages
    resetErrorMessages();

    const productName = document.getElementById("productName");
    const productSize = document.getElementById("product_size");
    const productBrand = document.getElementById("product_brand");
    const productDescription = document.getElementById("product_description");
    const productPrice = document.getElementById("product_price");
    const productStatus = document.getElementById("product_status");
    const coverImage = document.getElementById("coverImages");
    const productImages = document.getElementById("images");

    // Define regex patterns
    const nameRegex = /^[A-Za-z\s]+$/;
    const quantityRegex = /^[0-9]+$/;
    const brandRegex = /^[A-Za-z\s]+$/;
    const descriptionRegex = /^.{10,}$/; // At least 10 characters
    const priceRegex = /^[0-9]+(\.[0-9]{1,2})?$/; // Decimal number with up to two decimal places

    // Validate product title
    if (!validateField(productName.value, nameRegex, "nameErr", "Invalid Product Title Format")) {
        return false;
    }

    // Validate quantity
    if (!validateField(productSize.value, quantityRegex, "stockErr", "Invalid Quantity Format")) {
        return false;
    }

    // Validate brand
    if (!validateField(productBrand.value, brandRegex, "brandErr", "Invalid Brand Format")) {
        return false;
    }

    // Validate description
    if (!validateField(productDescription.value, descriptionRegex, "descriptionErr", "Description must be at least 10 characters")) {
        return false;
    }

    // Validate cover image
    if (!validateFile(coverImage, ["jpg", "jpeg", "png", "gif"], "coverImageErr", "Invalid Cover Image Format")) {
        return false;
    }

    // Validate additional images
    if (!validateFile(productImages, ["jpg", "jpeg", "png", "gif"], "imagesErr", "Invalid Additional Image Format")) {
        return false;
    }

    // Validate price
    if (!validateField(productPrice.value, priceRegex, "priceErr", "Invalid Price Format")) {
        return false;
    }

    // Validate category
    if (!validateField(productStatus.value.trim(), "", "categoryErr", "Category is required.")) {
        return false;
    }

    return true;
}

function validateField(value, regex, errorId, errorMessage) {
    const errorElement = document.getElementById(errorId);

    if (value.trim() === "") {
        displayError(errorElement, "Please enter the required information...");
        return false;
    }

    if (regex && !regex.test(value)) {
        displayError(errorElement, errorMessage);
        return false;
    }

    return true;
}

function validateFile(fileInput, allowedExtensions, errorId, errorMessage) {
    const errorElement = document.getElementById(errorId);
    const files = fileInput.files;

    if (files.length === 0) {
        displayError(errorElement, "File is required.");
        return false;
    }

    const fileExtension = files[0].name.split(".").pop().toLowerCase();
    if (!allowedExtensions.includes(fileExtension)) {
        displayError(errorElement, errorMessage);
        return false;
    }

    return true;
}

// Helper function to display error message
function displayError(errorElement, message) {
    errorElement.style.color = "red";
    errorElement.innerHTML = message;
    setTimeout(() => {
        errorElement.innerHTML = "";
    }, 5000);
}

function resetErrorMessages() {
    const errorElements = document.querySelectorAll("[id$='Err']"); 
    errorElements.forEach((element) => {
        element.innerText = "";
    });
}




        // function productValidation() {

        //     // Reset error messages
        //     resetErrorMessages();

       
        //     const productName = document.getElementById("productName")
        //     const productSize = document.getElementById("product_size")
        //     const productBrand = document.getElementById("product_brand");
        //     const productDescription = document.getElementById("product_description")
        //     const productPrice = document.getElementById("product_price")
        //     const productStatus = document.getElementById("product_status")
        //     const coverImage = document.getElementById(
        //         "images"); 
        //     const productImages = document.querySelector(
        //         "input[name='images']"); // Assuming 'images' is the name of the additional images input

        //     // Define regex patterns
        //     const nameRegex = /^[A-Za-z\s]+$/;
        //     const quantityRegex = /^[0-9]+$/;
        //     const brandRegex = /^[A-Za-z\s]+$/;
        //     const descriptionRegex = /^.{10,}$/; // At least 10 characters
        //     const priceRegex = /^[0-9]+(\.[0-9]{1,2})?$/; // Decimal number with up to two decimal places

        //     // Validate product title
        //     if (!validateField(productName.value, nameRegex, "nameErr", "Invalid Product Title Format")) {
        //         return false;
        //     }

        //     // Validate quantity
        //     if (!validateField(productSize.value, quantityRegex, "stockErr", "Invalid Quantity Format")) {
        //         return false;
        //     }

        //     // Validate brand
        //     if (!validateField(productBrand.value, brandRegex, "brandErr", "Invalid Brand Format")) {
        //         return false;
        //     }

        //     // Validate description
        //     if (!validateField(productDescription.value, descriptionRegex, "descriptionErr",
        //             "Description must be at least 10 characters")) {
        //         return false;
        //     }

        //     // Validate cover image
        //     if (!validateFile(coverImage, ["jpg", "jpeg", "png", "gif"], "imageErr", "Invalid Cover Image Format")) {
        //         return false;
        //     }

        //     // Validate additional images
        //     if (!validateFile(productImages, ["jpg", "jpeg", "png", "gif"], "imageErr",
        //             "Invalid Additional Image Format")) {
        //         return false;
        //     }

        //     // Validate price
        //     if (!validateField(productPrice.value, priceRegex, "priceErr", "Invalid Price Format")) {
        //         return false;
        //     }

        //     // Validate category
        //     if (!validateField(productStatus.value.trim(), "", "categoryErr", "Category is required.")) {
        //         return false;
        //     }


        //     return true;
        // }

      
        // function validateField(value, regex, errorId, errorMessage) {
        //     const errorElement = document.getElementById(errorId);

        //     if (value.trim() === "") {
        //         displayError(errorElement, "Please enter the required information...");
        //         return false;
        //     }

        //     if (regex && !regex.test(value)) {
        //         displayError(errorElement, errorMessage);
        //         return false;
        //     }

        //     return true;
        // }

    
        // function validateFile(fileInput, allowedExtensions, errorId, errorMessage) {
        //     const errorElement = document.getElementById(errorId);
        //     const files = fileInput.files;

        //     if (files.length === 0) {
        //         displayError(errorElement, "File is required.");
        //         return false;
        //     }

        //     const fileExtension = files[0].name.split(".").pop().toLowerCase();
        //     if (!allowedExtensions.includes(fileExtension)) {
        //         displayError(errorElement, errorMessage);
        //         return false;
        //     }

        //     return true;
        // }

        // // Helper function to display error message
        // function displayError(errorElement, message) {
        //     errorElement.style.color = "red";
        //     errorElement.innerHTML = message;
        //     setTimeout(() => {
        //         errorElement.innerHTML = "";
        //     }, 5000);
        // }

      
        // function resetErrorMessages() {
        //     const errorElements = document.querySelectorAll(
        //         "[id$='Err']"); 
        //     errorElements.forEach((element) => {
        //         element.innerText = "";
        //     });
        // }
    </script>




    <%- include('adminFooter')%>